# ---- Base image ----
FROM node:20-alpine AS base
# libc6-compat is recommended on Alpine for some native deps
RUN apk add --no-cache libc6-compat
# Your Next app is in a subfolder
WORKDIR /app/restricted-yt


# =========================
# deps: install dependencies
# =========================
FROM base AS deps

# Copy only manifests for better cache hits
COPY restricted-yt/package.json restricted-yt/yarn.lock* restricted-yt/package-lock.json* restricted-yt/pnpm-lock.yaml* restricted-yt/.npmrc* ./

# Install based on the lockfile that exists
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi


# =========================
# builder: build the project
# =========================
FROM base AS builder
# Reuse node_modules from deps
COPY --from=deps /app/restricted-yt/node_modules ./node_modules
# Copy the whole app source into /app/restricted-yt
COPY restricted-yt/ ./

# (Optional) disable telemetry during build
# ENV NEXT_TELEMETRY_DISABLED=1

# Build (must produce .next/standalone given output: "standalone")
RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi


# =========================
# runner: production runtime
# =========================
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
# ENV NEXT_TELEMETRY_DISABLED=1

# Non-root user
RUN addgroup --system --gid 1001 nodejs && adduser --system --uid 1001 nextjs
USER nextjs

# Public assets
COPY --from=builder /app/restricted-yt/public ./public

# Standalone server output + static assets
COPY --from=builder --chown=nextjs:nodejs /app/restricted-yt/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/restricted-yt/.next/static ./.next/static

# Network settings for containers/proxies (Coolify)
EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# server.js is generated by Next when output: "standalone"
CMD ["node", "server.js"]
